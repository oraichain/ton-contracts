#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "utils/verify.fc";
#include "static/errors.fc";
#include "static/op_codes.fc";
#include "static/state.fc";
#include "utils/messages.fc";
#include "common/messages.fc";
#include "common/address.fc";
#include "utils/jetton.fc";
#include "utils/helper.fc";
;; prefix and suffix for json
const msg_prefix = "7b227375626d69745f6272696467655f746f5f746f6e5f696e666f223a7b2264617461223a"s;
const end_json = "7d7d"s;
const slice quotes = "22"s;
;; storage variables
global slice light_client; ;; TODO: dynamic calculate based on blockId
global slice whitelist_denom; ;; whitelist denom contract
global int packet_seq;
global cell bridge_wasm_smart_contract;
global cell jetton_wallet_code;
global cell processed_txs;
;;TODO: on_bounce function

;; load_data populates storage variables using stored data
() load_data() impure {
    slice ds = get_data().begin_parse();
    light_client = ds~load_msg_addr();
    whitelist_denom = ds~load_msg_addr();
    packet_seq = ds~load_uint(64);
    bridge_wasm_smart_contract = ds~load_ref();
    jetton_wallet_code = ds~load_ref();
    slice dict_cs = ds~load_ref().begin_parse();
    processed_txs = dict_cs~load_dict();
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
    set_data(
        begin_cell()
        .store_slice(light_client)
        .store_slice(whitelist_denom)
        .store_uint(packet_seq, 64)
        .store_ref(bridge_wasm_smart_contract)
        .store_ref(jetton_wallet_code)
        .store_ref(begin_cell().store_dict(processed_txs).end_cell())
        .end_cell()
    );
}

() on_bounce(slice in_msg_body){
    in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    int op = in_msg_body~load_uint(32);
    throw_unless(709, (op == op::mint()) | (op == op::transfer()));
    in_msg_body~load_ref();
    in_msg_body~load_ref();
    in_msg_body~load_ref();
    ;; TODO some biz;
    ;; emit_log_simple(event_id,data,query_id);
}

() confirm_tx (slice in_msg_body, int msg_value) impure {
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    (_, slice to, slice jetton_master, int amount, int src) = (in_msg_body~load_uint(64), in_msg_body~load_msg_addr(), in_msg_body~load_msg_addr(), in_msg_body~load_uint(128), in_msg_body~load_uint(32));
    slice ref_slice = in_msg_body~load_ref().begin_parse();
    slice response_address = ref_slice~load_msg_addr();
    if(src == src::cosmos){
        cell mint_msg = begin_cell()
                    .store_uint(op::internal_transfer(), 32)
                    .store_uint(query_id, 64)
                    .store_coins(amount)
                    .store_uint(0, 2)
                    .store_slice(response_address)
                    .store_coins(0)
                    .store_maybe_ref(null())
                    .end_cell();
      
        cell body = begin_cell()
                    .store_uint(op::mint(),32)
                    .store_uint(query_id,64)
                    .store_slice(to)
                    .store_coins(msg_value)
                    .store_ref(mint_msg)
                    .end_cell();
        
        send_simple_message(0, jetton_master, body, CARRY_REMAINING_GAS);
    }

    if(src == src::ton){
        int jetton_master_len = slice_bits(jetton_master);
        if(jetton_master_len == 2){
            send_empty_message(amount,to, SEND_MODE_PAY_FEES_SEPARETELY);
        } 

        if(jetton_master_len == 267) {
            slice bridge_jetton_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_master, jetton_wallet_code);
            cell body = begin_cell()
                        .store_uint(op::transfer(), 32)
                        .store_uint(query_id, 64)
                        .store_coins(amount)
                        .store_slice(to)
                        .store_slice(response_address)
                        .store_maybe_ref(null())
                        .store_coins(0)
                        .store_maybe_ref(null())
                        .end_cell();
            send_simple_message(0, bridge_jetton_wallet, body, CARRY_REMAINING_GAS);
        }
    }
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
        return ();
    }
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
  
    load_data(); ;; here we populate the storage variables

    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

    if (op == op::send_tx) {
        int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
        int height = in_msg_body~load_uint(64);
        cell tx_raw_cell = in_msg_body~load_ref();
        cell proofs = in_msg_body~load_ref();
        cell positions = in_msg_body~load_ref();
        cell data = in_msg_body~load_ref();
        slice data_slice = data.begin_parse();
        int tx_cell_hash = tx_raw_cell.cell_hash();
        slice tx_raw = tx_raw_cell.begin_parse();
        ;; basic validate
        throw_unless(error::empty_tx, tx_raw.slice_refs_empty?() == 0);
        slice auth_info = tx_raw~load_ref().begin_parse();
        slice tx_body = tx_raw~load_ref().begin_parse();
        slice signatures = tx_raw~load_ref().begin_parse();
        throw_unless(error::empty_auth_info, auth_info.slice_refs_empty?() == 0);
        throw_unless(error::empty_tx_body, tx_body.slice_refs_empty?() == 0);
        throw_unless(error::empty_tx_signatures, signatures.slice_refs_empty?() == 0);
        (slice processed_data, int exist) = processed_txs.udict_get?(256, tx_cell_hash);
        throw_unless(error::already_process_data, exist == 0); ;; doesn't process the same data twice
        slice messages = tx_body~load_ref().begin_parse();
        while(messages.slice_refs_empty?() != -1) {
            slice next_ref = messages~load_ref().begin_parse();
            slice message = messages~load_ref().begin_parse();
            slice typeUrl = message~load_ref().begin_parse();
            slice value = message~load_ref().begin_parse();
            slice sender_contract = value~load_ref().begin_parse();
            sender_contract~load_ref(); ;; skip sender
            slice contract = sender_contract~load_ref().begin_parse();
            int is_execute_msg = typeUrl.slice_hash() == msg_execute_contract::typeUrl.slice_hash();
            int is_bridge_smart_contract = contract.slice_hash() == bridge_wasm_smart_contract.begin_parse().slice_hash();
            
            if(is_execute_msg & is_bridge_smart_contract){
                slice msg = value~load_ref().begin_parse();
                tuple tuple_msg = msg.slice_ref_to_tuple();
                tuple tuple_data = empty_tuple();
                tuple_data~tpush(msg_prefix);
                (slice f, slice b) = cs_hex_to_tuple_string(data_slice);
                tuple_data~tpush(quotes);
                tuple_data~tpush(f);
                tuple_data~tpush(b);
                tuple_data~tpush(quotes);
                tuple_data~tpush(end_json);
                int data_hash = digest_hash(tuple_data);
                int msg_hash = digest_hash(tuple_msg);
                if(data_hash == msg_hash){
                    processed_txs~udict_set_builder(256, tx_cell_hash, begin_cell().store_int(-1, 8)); ;; avoid reentrency
                    builder bodyBuilder = begin_cell();
                    bodyBuilder = bodyBuilder 
                        .store_uint(op::verify_receipt, 32)
                        .store_uint(query_id, 64)
                        .store_ref(
                        begin_cell()
                            .store_uint(height, 64)
                            .store_slice(sender_address)
                            .store_ref(tx_raw_cell)
                            .store_ref(proofs)
                            .store_ref(positions)
                            .store_ref(data)
                            .end_cell()
                    );
                    cell body = bodyBuilder.end_cell();
                    send_simple_message(0, light_client, body, CARRY_REMAINING_GAS);
                }
            }
            messages = next_ref;
        }
        save_data();
        return ();
    } 
    
    if(op == op::confirm_tx){
        throw_unless(error::invalid_sender, sender_address.slice_hash() == light_client.slice_hash()); ;; only light client can confirm tx
        confirm_tx(in_msg_body, msg_value); 
        return ();
    }

    if (op == op::transfer_notification()) {
        ~dump(null());
        int query_id = in_msg_body~load_uint(64);
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        slice either_forward_payload = in_msg_body;
        slice first_ref = either_forward_payload~load_ref().begin_parse();
        ~dump(null());
        slice jetton_master_address = first_ref~load_msg_addr();
        ~dump(first_ref);
        int timeout = first_ref~load_uint(64);
        cell memo = either_forward_payload~load_ref();
        slice calculate_sender = calculate_user_jetton_wallet_address(from_address, jetton_master_address, jetton_wallet_code);

        ;; validate jetton_master_address is valid
        throw_if(error::invalid_sender, compare_address(sender_address ,calculate_sender) != -1);

        builder bodyBuilder = begin_cell();
        bodyBuilder = bodyBuilder 
                        .store_uint(op::query_denom, 32)
                        .store_uint(query_id, 64)
                        .store_ref(begin_cell()
                            .store_slice(jetton_master_address)
                            .store_coins(jetton_amount)
                            .store_uint(timeout, 64)
                            .store_ref(memo)
                            .store_ref(begin_cell().store_slice(from_address).end_cell())
                        .end_cell());
        cell body = bodyBuilder.end_cell();
        send_simple_message(0, whitelist_denom, body, CARRY_REMAINING_GAS);
        return ();
    }

    if (op == op::callback_denom) {
        throw_if(error::invalid_sender, compare_address(whitelist_denom ,sender_address) != -1);
        int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
        slice ds = in_msg_body~load_ref().begin_parse();
        int existed = ds~load_int(8);
        throw_if(error::unsupport_this_denom, existed != -1);
        int is_root_from_ton = ds~load_int(8);
        slice jetton_master_address = ds~load_msg_addr();
        int amount = ds~load_coins();
        int timeout = ds~load_uint(64);
        cell memo_cell = ds~load_ref();
        slice response_address = ds~load_ref().begin_parse();

        cell emit_data = begin_cell()
                            .store_uint(packet_seq, 64)
                            .store_uint(timeout, 64)
                            .store_slice(jetton_master_address)
                            .store_coins(amount)
                            .store_ref(memo_cell)
                            .end_cell();
        packet_seq = packet_seq + 1;
        ;; execute burn if not from ton
        if (is_root_from_ton == 0) {
            slice bridge_jetton_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_master_address, jetton_wallet_code);
            var msg_body = begin_cell()
                            .store_uint(op::burn(), 32)
                            .store_uint(query_id, 64)
                            .store_coins(amount)
                            .store_slice(response_address)
                            .end_cell();
            send_simple_message(0, bridge_jetton_wallet, msg_body, CARRY_REMAINING_GAS);
        } else {
            ;; should refund manually
            var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), IGNORE_ERRORS + CARRY_REMAINING_GAS);
        }

        save_data();
        emit_log_simple(my_address().slice_hash(), emit_data ,query_id);
        ;; TODO: Tra tien cho user
        return ();
    }


    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

(slice, slice ,cell) get_bridge_data() method_id {
    load_data();
    return (light_client, bridge_wasm_smart_contract.begin_parse(), jetton_wallet_code);
}