#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "utils/messages.fc";
#include "common/messages.fc";
#include "common/address.fc";
#include "utils/jetton.fc";
#include "bridge_adapter/packet_transfer.fc";
#include "bridge_adapter/opcodes.fc";
#include "bridge_adapter/errors.fc";
#include "bridge_adapter/state.fc";
#include "bridge_adapter/helper.fc";
#include "light_client/opcodes.fc";
#include "whitelist/opcodes.fc";


;; storage variables
global slice light_client_master; ;; TODO: dynamic calculate based on blockId
global slice whitelist_denom; ;; whitelist denom contract
global int next_packet_seq;
global cell bridge_wasm_smart_contract;
global cell jetton_wallet_code;
global cell counterparty_seq_receipt;
global cell send_packets_from_ton;

;; load_data populates storage variables using stored data
() load_data() impure {
    slice ds = get_data().begin_parse();
    light_client_master = ds~load_msg_addr();
    whitelist_denom = ds~load_msg_addr();
    next_packet_seq = ds~load_uint(64);
    bridge_wasm_smart_contract = ds~load_ref();
    jetton_wallet_code = ds~load_ref();
    slice dict_cs = ds~load_ref().begin_parse();
    counterparty_seq_receipt = dict_cs~load_dict();
    slice spft_dict_cs = ds~load_ref().begin_parse();
    send_packets_from_ton =  spft_dict_cs~load_dict();
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
    set_data(
        begin_cell()
        .store_slice(light_client_master)
        .store_slice(whitelist_denom)
        .store_uint(next_packet_seq, 64)
        .store_ref(bridge_wasm_smart_contract)
        .store_ref(jetton_wallet_code)
        .store_ref(begin_cell().store_dict(counterparty_seq_receipt).end_cell())
        .store_ref(begin_cell().store_dict(send_packets_from_ton).end_cell())
        .end_cell()
    );
}

() on_recv_packet (slice in_msg_body, int msg_value) impure {
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    slice body = in_msg_body~load_ref().begin_parse();
    int is_packet_existed = body~load_uint(1);
    slice response_address = body~load_msg_addr();
    cell data_cell = body~load_ref();
    slice data = data_cell.begin_parse();

    (int counterparty_packet_seq, int op_codes, int src, slice to, slice jetton_master, int amount, int timeout) = (data~load_uint(64), data~load_uint(32), data~load_uint(32), data~load_msg_addr(), data~load_msg_addr(), data~load_uint(128), data~load_uint(64));

    if(now() >= timeout){
        cell emit_data = begin_cell()
                        .store_uint(op::timeout_send_packet, 32)
                        .store_uint(counterparty_packet_seq, 64)
                        .store_uint(0, 16) ;; channel-id => update soon when have this feature
                        .end_cell();
        emit_log_simple(my_address().slice_hash(), emit_data ,query_id);
        return ();
    }
    (_, int exist) = counterparty_seq_receipt.udict_get?(64, counterparty_packet_seq);
    throw_unless(error::processed_packet, exist == 0);
    counterparty_seq_receipt~udict_set(64, counterparty_packet_seq, data_cell.begin_parse());
    
    if(is_packet_existed == 0){
        cell emit_data = begin_cell()
                        .store_uint(is_packet_existed, 1)
                        .store_uint(op_codes, 32)
                        .store_uint(counterparty_packet_seq, 64)
                        .store_uint(0, 16) ;; channel-id => update soon when have this feature
                        .end_cell();
                        
        emit_log_simple(my_address().slice_hash(), emit_data ,query_id);
        return ();
    }

    cell emit_data = begin_cell()
                        .store_uint(is_packet_existed, 1)
                        .store_uint(op_codes, 32)
                        .store_uint(counterparty_packet_seq, 64)
                        .store_uint(0, 16) ;; channel-id => update soon when have this feature
                        .end_cell();
                        
    emit_log_simple(my_address().slice_hash(), emit_data ,query_id);
  
    if(src == src::cosmos){
        cell mint_msg = begin_cell()
                    .store_uint(op::internal_transfer(), 32)
                    .store_uint(query_id, 64)
                    .store_coins(amount)
                    .store_uint(0, 2)
                    .store_slice(response_address)
                    .store_coins(0)
                    .store_maybe_ref(null())
                    .end_cell();
      
        cell body = begin_cell()
                    .store_uint(op::mint(),32)
                    .store_uint(query_id,64)
                    .store_slice(to)
                    .store_coins(msg_value)
                    .store_ref(mint_msg)
                    .end_cell();
        
        send_simple_message(0, jetton_master, body, CARRY_REMAINING_GAS);
    }

    if(src == src::ton){
        int jetton_master_len = slice_bits(jetton_master);
        if(jetton_master_len == 2){
            send_empty_message(amount,to, SEND_MODE_PAY_FEES_SEPARETELY);
        } 

        if(jetton_master_len == 267) {
            slice bridge_jetton_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_master, jetton_wallet_code);
            cell body = begin_cell()
                        .store_uint(op::transfer(), 32)
                        .store_uint(query_id, 64)
                        .store_coins(amount)
                        .store_slice(to)
                        .store_slice(response_address)
                        .store_maybe_ref(null())
                        .store_coins(0)
                        .store_maybe_ref(null())
                        .end_cell();
            send_simple_message(0, bridge_jetton_wallet, body, CARRY_REMAINING_GAS);
        }
    }
    
    save_data();
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
        return ();
    }
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
  
    load_data(); ;; here we populate the storage variables

    if (flags & 1) {
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

    if (op == op::bridge_recv_packet) {
        int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
        slice body = in_msg_body~load_ref().begin_parse();
        int proven_height = body~load_uint(64);
        cell proofs = body~load_ref();
        cell packet = body~load_ref(); 

        builder bodyBuilder = begin_cell();
        bodyBuilder = bodyBuilder 
                    .store_uint(op::receive_packet, 32)
                    .store_uint(query_id, 64)
                    .store_ref(begin_cell()
                                .store_uint(proven_height, 64)
                                .store_slice(sender_address)
                                .store_ref(bridge_wasm_smart_contract)
                                .store_ref(proofs)
                                .store_ref(packet)
                                .end_cell());
        cell body = bodyBuilder.end_cell();
        send_simple_message(0, light_client_master, body, CARRY_REMAINING_GAS);
        ;; prune all timeout packet
        (int key, slice packet, int flag) = counterparty_seq_receipt.udict_get_min?(64);
        int current_time = now();
        while(flag){
             (key, packet, flag) = counterparty_seq_receipt.udict_get_next?(64, key);
             if(flag == -1) {
                int timeout = packet.get_timeout();
                if(current_time >= timeout){
                    counterparty_seq_receipt.udict_delete?(64, key);
                }
             }
        }
        save_data();
        return ();
    } 

    if(op == op::on_recv_packet){
        throw_unless(error::invalid_sender, compare_address(sender_address, light_client_master));
        on_recv_packet(in_msg_body, msg_value); 
        return ();
    }

    if (op == op::transfer_notification()) {
        int query_id = in_msg_body~load_uint(64);
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        slice either_forward_payload = in_msg_body;
        slice first_ref = either_forward_payload~load_ref().begin_parse();
        slice jetton_master_address = first_ref~load_msg_addr();
        int timeout = first_ref~load_uint(64);
        cell memo = either_forward_payload~load_ref();
        slice calculate_sender = calculate_user_jetton_wallet_address(my_address(), jetton_master_address, jetton_wallet_code);
        ;; validate jetton_master_address is valid
        throw_unless(error::invalid_sender, compare_address(sender_address ,calculate_sender));
        slice from_jetton_address = calculate_user_jetton_wallet_address(from_address, from_address, jetton_wallet_code);
        builder bodyBuilder = begin_cell()
                                .store_uint(op::query_denom, 32)
                                .store_uint(query_id, 64)
                                .store_ref(begin_cell()
                                    .store_slice(jetton_master_address)
                                    .store_coins(jetton_amount)
                                    .store_uint(timeout, 64)
                                    .store_ref(memo)
                                    .store_ref(begin_cell().store_slice(from_address).end_cell())
                                .end_cell());
        cell body = bodyBuilder.end_cell();
        send_simple_message(0, whitelist_denom, body, CARRY_REMAINING_GAS);
        return ();
    }

    if (op == op::callback_denom) {
        throw_unless(error::invalid_sender, compare_address(whitelist_denom ,sender_address));
        int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
        slice ds = in_msg_body~load_ref().begin_parse();
        int existed = ds~load_int(8);
        throw_unless(error::unsupport_this_denom, existed);
        int is_root_from_ton = ds~load_int(8);
        slice jetton_master_address = ds~load_msg_addr();
        int amount = ds~load_coins();
        int timeout = ds~load_uint(64);
        cell memo_cell = ds~load_ref();
        slice response_address = ds~load_ref().begin_parse();

        cell emit_data = begin_cell()
                            .store_uint(op::send_to_cosmos, 32)
                            .store_uint(next_packet_seq, 64)
                            .store_uint(timeout, 64)
                            .store_slice(jetton_master_address)
                            .store_slice(response_address)
                            .store_uint(0, 16) ;; channel-id => update soon when have this feature
                            .store_coins(amount)
                            .store_ref(memo_cell)
                            .end_cell();
        send_packets_from_ton~udict_set(64, next_packet_seq, emit_data.begin_parse());
        next_packet_seq = next_packet_seq + 1;
        ;; execute burn if not from ton
        if (is_root_from_ton == 0) {
            slice bridge_jetton_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_master_address, jetton_wallet_code);
            var msg_body = begin_cell()
                            .store_uint(op::burn(), 32)
                            .store_uint(query_id, 64)
                            .store_coins(amount)
                            .store_slice(response_address)
                            .end_cell();
            send_simple_message(0, bridge_jetton_wallet, msg_body, CARRY_REMAINING_GAS);
        } else {
            ;; should refund manually
            var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), IGNORE_ERRORS + CARRY_REMAINING_GAS);
        }

        emit_log_simple(my_address().slice_hash(), emit_data ,query_id);
        save_data();
        return ();
    }

    if (op == op::bridge_ton) {
        int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
        slice ds = in_msg_body~load_ref().begin_parse();
        int min_ton_for_execute = 20000000;
        int amount = ds~load_coins();
        int timeout = ds~load_uint(64);
        cell memo = ds~load_ref();
        throw_unless(error::invalid_native_amount, msg_value > amount + min_ton_for_execute);
        int remaining_gas = msg_value - amount - min_ton_for_execute;
        
        cell emit_data = begin_cell()
                            .store_uint(op::send_to_cosmos, 32)
                            .store_uint(next_packet_seq, 64)
                            .store_uint(timeout, 64)
                            .store_uint(0, 2)
                            .store_slice(sender_address)
                            .store_uint(0, 16) ;; channel-id => update soon when have this feature
                            .store_coins(amount)
                            .store_ref(memo)
                            .end_cell();
        send_packets_from_ton~udict_set(64, next_packet_seq, emit_data.begin_parse());
        next_packet_seq = next_packet_seq + 1;

        emit_log_simple(my_address().slice_hash(), emit_data, query_id);

        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(sender_address)
            .store_coins(remaining_gas)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
        send_raw_message(msg.end_cell(), IGNORE_ERRORS + NORMAL);
        
        save_data();
        return ();
    }


    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

(slice, slice ,cell) get_bridge_data() method_id {
    load_data();
    return (light_client_master, bridge_wasm_smart_contract.begin_parse(), jetton_wallet_code);
}