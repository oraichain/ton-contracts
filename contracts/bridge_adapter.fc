#include "imports/stdlib.fc";
#include "utils/verify.fc";
#include "static/errors.fc";
#include "static/op_codes.fc";
#include "utils/messages.fc";

;; storage variables


;; load_data populates storage variables using stored data
() load_data() impure {


    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
    set_data(
        begin_cell()
          
        .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
        return ();
    }

    slice cs = in_msg_full.begin_parse();
   
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
   
    if (op == op::verify_tx) {
       
    } 
    
    if(op == op::confirm_tx){

    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

int verify_receipt(slice ds) method_id {
    slice block_proof = ds~load_ref().begin_parse();
    int block_hash = block_proof~load_uint(256);
    slice header = block_proof~load_ref().begin_parse();
    slice commit = block_proof~load_ref().begin_parse();
    slice validators = block_proof~load_ref().begin_parse();
    int result = verify::verify_block_hash(header, block_hash);
    return result;
}