#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "utils/messages.fc";
#include "common/messages.fc";
#include "common/address.fc";
#include "bridge_adapter/packet_transfer.fc";
#include "bridge_adapter/opcodes.fc";
#include "bridge_adapter/errors.fc";
#include "bridge_adapter/state.fc";
#include "bridge_adapter/helper.fc";
#include "light_client/opcodes.fc";
#include "whitelist/opcodes.fc";
#include "common/errors.fc";
#include "common/gas.fc";

;; storage variables
global slice light_client_master; ;; TODO: dynamic calculate based on blockId
global slice admin; ;; pause and update contract only for early stage
global slice whitelist_denom; ;; whitelist denom contract
global int next_packet_seq;
global int paused;
global cell bridge_wasm_smart_contract;
global cell jetton_wallet_code;
global cell counterparty_seq_receipt;
global cell send_packets_from_ton;

;; load_data populates storage variables using stored data
() load_data() impure {
    slice ds = get_data().begin_parse();
    light_client_master = ds~load_msg_addr();
    admin = ds~load_msg_addr();
    whitelist_denom = ds~load_msg_addr();
    next_packet_seq = ds~load_uint(64);
    paused = ds~load_uint(1);
    bridge_wasm_smart_contract = ds~load_ref();
    jetton_wallet_code = ds~load_ref();
    slice dict_cs = ds~load_ref().begin_parse();
    counterparty_seq_receipt = dict_cs~load_dict();
    slice spft_dict_cs = ds~load_ref().begin_parse();
    send_packets_from_ton =  spft_dict_cs~load_dict();
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
    set_data(
        begin_cell()
        .store_slice(light_client_master)
        .store_slice(admin)
        .store_slice(whitelist_denom)
        .store_uint(next_packet_seq, 64)
        .store_uint(paused, 1)
        .store_ref(bridge_wasm_smart_contract)
        .store_ref(jetton_wallet_code)
        .store_ref(begin_cell().store_dict(counterparty_seq_receipt).end_cell())
        .store_ref(begin_cell().store_dict(send_packets_from_ton).end_cell())
        .end_cell()
    );
}

() on_recv_packet (slice in_msg_body, int msg_value) impure {
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    slice body = in_msg_body~load_ref().begin_parse();
    int is_packet_existed = body~load_uint(1);
    slice response_address = body~load_msg_addr();
    cell packet = body~load_ref();
    slice packet_slice = packet.begin_parse();
    (int opcode_packet, int seq, int token_origin, int amount, int timeout) = (packet_slice~load_uint(32), packet_slice~load_uint(64), packet_slice~load_uint(32), packet_slice~load_uint(128), packet_slice~load_uint(64));
    if (is_packet_existed == 0){
        cell emit_ack = begin_cell()
                        .store_uint(opcode_packet, 32)
                        .store_uint(seq, 64)
                        .store_uint(ack::error, 2)
                        .end_cell();
                        
        emit_log_simple(my_address().slice_hash(), emit_ack ,query_id);
        throw(error::packet_verified_exist_fail);
    }
    
    if (opcode_packet == op::send_to_ton){
        (slice to, slice token_wallet) = (packet_slice~load_msg_addr(), packet_slice~load_msg_addr());

        if (now() >= timeout) {
            cell emit_ack = begin_cell()
                            .store_uint(op::send_to_ton, 32)
                            .store_uint(seq, 64)
                            .store_uint(ack::timeout, 2)
                            .end_cell();
            emit_log_simple(my_address().slice_hash(), emit_ack ,query_id);
            return ();
        }
    
        (_, int exist) = counterparty_seq_receipt.udict_get?(64, seq);
        if (exist) {
            cell emit_ack = begin_cell()
                            .store_uint(op::send_to_ton, 32)
                            .store_uint(seq, 64)
                            .store_uint(ack::error, 2)
                            .end_cell();
            emit_log_simple(my_address().slice_hash(), emit_ack ,query_id);
            throw(error::processed_packet);
        }

        if (token_origin == token_origin::cosmos){
            cell mint_msg = begin_cell()
                        .store_uint(op::internal_transfer(), 32)
                        .store_uint(query_id, 64)
                        .store_coins(amount)
                        .store_uint(0, 2)
                        .store_slice(response_address)
                        .store_coins(0)
                        .store_maybe_ref(null())
                        .end_cell();
        
            cell body = begin_cell()
                        .store_uint(op::mint(),32)
                        .store_uint(query_id,64)
                        .store_slice(to)
                        .store_coins(msg_value)
                        .store_ref(mint_msg)
                        .end_cell();
            
            send_simple_message(0, token_wallet, body, CARRY_REMAINING_GAS);
        }

        if (token_origin == token_origin::ton){
            if (token_wallet.preload_uint(2) == 0) {
                int refund_amount = msg_value - fee::send_ton; 
                cell empty_cell = begin_cell().end_cell();
                send_message_nobounce(amount, to, empty_cell, IGNORE_ERRORS + SEND_MODE_PAY_FEES_SEPARETELY);
                send_message_nobounce(refund_amount, response_address, empty_cell, IGNORE_ERRORS + SEND_MODE_PAY_FEES_SEPARETELY);
            } else {
                cell body = begin_cell()
                            .store_uint(op::transfer(), 32)
                            .store_uint(query_id, 64)
                            .store_coins(amount)
                            .store_slice(to)
                            .store_slice(response_address)
                            .store_maybe_ref(null())
                            .store_coins(0)
                            .store_maybe_ref(null())
                            .end_cell();
                send_simple_message(0, token_wallet, body, CARRY_REMAINING_GAS);
            }
        }
        counterparty_seq_receipt~udict_set(64, seq, packet.begin_parse());
        
        cell emit_ack = begin_cell()
                        .store_uint(opcode_packet, 32)
                        .store_uint(seq, 64)
                        .store_uint(ack::success, 2)
                        .end_cell();
                        
        emit_log_simple(my_address().slice_hash(), emit_ack ,query_id);
        
        return ();
    }

    if (opcode_packet == op::send_to_cosmos){
        int remote_receiver_byte_len = packet_slice~load_uint(8);
        packet_slice~load_uint(remote_receiver_byte_len * 8);
        slice token_wallet =  packet_slice~load_msg_addr();
        int ack = packet_slice~load_uint(2);
        slice packet_ref = packet_slice~load_ref().begin_parse();
        slice to = packet_ref~load_msg_addr(); ;; local_sender

        if (ack == ack::timeout) {
            throw_unless(error::not_time_to_refund_ack_packet, now() >= timeout);

            if (token_origin == token_origin::cosmos){
                cell mint_msg = begin_cell()
                            .store_uint(op::internal_transfer(), 32)
                            .store_uint(query_id, 64)
                            .store_coins(amount)
                            .store_uint(0, 2)
                            .store_slice(response_address)
                            .store_coins(0)
                            .store_maybe_ref(null())
                            .end_cell();
            
                cell body = begin_cell()
                            .store_uint(op::mint(),32)
                            .store_uint(query_id,64)
                            .store_slice(to)
                            .store_coins(msg_value)
                            .store_ref(mint_msg)
                            .end_cell();
                
                send_simple_message(0, token_wallet, body, CARRY_REMAINING_GAS);
            }

            if (token_origin == token_origin::ton){
                if (token_wallet.preload_uint(2) == 0) {
                    int refund_amount = msg_value - fee::send_ton; 
                    send_empty_message(amount,to, IGNORE_ERRORS + SEND_MODE_PAY_FEES_SEPARETELY);
                    send_empty_message(refund_amount, response_address , IGNORE_ERRORS + SEND_MODE_PAY_FEES_SEPARETELY);
                } else {
                    cell body = begin_cell()
                                .store_uint(op::transfer(), 32)
                                .store_uint(query_id, 64)
                                .store_coins(amount)
                                .store_slice(to)
                                .store_slice(response_address)
                                .store_maybe_ref(null())
                                .store_coins(0)
                                .store_maybe_ref(null())
                                .end_cell();
                    send_simple_message(0, token_wallet, body, CARRY_REMAINING_GAS);
                }
            }
        } else {
            ;; if not timeout, just refunds
            send_empty_message(0, response_address, IGNORE_ERRORS + CARRY_REMAINING_GAS);
        }

        send_packets_from_ton~udict_delete?(64,seq);

        return ();
    }
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
        return ();
    }
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
  
    load_data(); ;; here we populate the storage variables

    if (flags & 1) {
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

    if (op == op::bridge_recv_packet) {
        throw_unless(error::not_enough_gas, msg_value >= fee::bridge_recv_packet);
        throw_unless(error::paused, paused == paused::unpaused);
        int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
        slice body = in_msg_body~load_ref().begin_parse();
        int proven_height = body~load_uint(64);
        cell proofs = body~load_ref();
        cell packet = body~load_ref();
        slice packet_slice = packet.begin_parse();
        int opcode_packet = packet_slice~load_uint(32);
        throw_unless(error::invalid_packet_opcode, (opcode_packet == op::send_to_cosmos) | (opcode_packet == op::send_to_ton));

        builder bodyBuilder = begin_cell();

        if (opcode_packet == op::send_to_ton) {
            bodyBuilder = bodyBuilder 
            .store_uint(op::receive_packet, 32)
            .store_uint(query_id, 64)
            .store_ref(begin_cell()
                        .store_uint(proven_height, 64)
                        .store_slice(sender_address)
                        .store_ref(bridge_wasm_smart_contract)
                        .store_ref(proofs)
                        .store_ref(packet)
                        .end_cell());
        } else {
            int seq = packet_slice~load_uint(64);
            int ack = packet_slice~load_uint(2);
            (slice stored_packet_data, int exist) = send_packets_from_ton.udict_get?(64, seq);
            
            if (exist != -1) {
                int refund_amount = msg_value - fee::bridge_recv_packet_failed;
                var msg = begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(sender_address)
                    .store_coins(refund_amount)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_uint(op::excesses(), 32)
                    .store_uint(query_id, 64);
                send_raw_message(msg.end_cell(), IGNORE_ERRORS + SEND_MODE_PAY_FEES_SEPARETELY);
                return ();
            }
            throw_unless(error::packet_does_not_exist, exist);
            cell new_packet = begin_cell().store_slice(stored_packet_data).store_uint(ack, 2).end_cell();
            bodyBuilder = bodyBuilder 
            .store_uint(op::receive_packet, 32)
            .store_uint(query_id, 64)
            .store_ref(begin_cell()
                        .store_uint(proven_height, 64)
                        .store_slice(sender_address)
                        .store_ref(bridge_wasm_smart_contract)
                        .store_ref(proofs)
                        .store_ref(new_packet)
                        .end_cell());
        }

        cell body = bodyBuilder.end_cell();
        send_simple_message(0, light_client_master, body, CARRY_REMAINING_GAS);
        ;; prune all timeout packet
        (int key, slice packet, int flag) = counterparty_seq_receipt.udict_get_min?(64);
        int current_time = now();
        while(flag){
             (key, packet, flag) = counterparty_seq_receipt.udict_get_next?(64, key);
             if(flag == -1) {
                int timeout = packet.get_timeout();
                if(current_time >= timeout){
                    counterparty_seq_receipt.udict_delete?(64, key);
                }
             }
        }
        save_data();
        return ();
    } 

    if(op == op::on_recv_packet){
        throw_unless(error::unauthorized_sender, compare_address(sender_address, light_client_master));
        on_recv_packet(in_msg_body, msg_value); 
        save_data();
        return ();
    }

    if (op == op::transfer_notification()) {
        throw_unless(error::not_enough_gas, msg_value >= fee::send_to_cosmos);
        throw_unless(error::paused, paused == paused::unpaused);
        int query_id = in_msg_body~load_uint(64);
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        slice either_forward_payload = in_msg_body;
        int remote_receiver_byte_len = either_forward_payload~load_uint(8);
        int remote_receiver_bits_len = remote_receiver_byte_len << 3;
        int remote_receiver = either_forward_payload~load_uint(remote_receiver_bits_len);
        slice ref_slice = either_forward_payload~load_ref().begin_parse();
        int timeout = ref_slice~load_uint(64);
        cell memo = either_forward_payload~load_ref();
        
        builder bodyBuilder = begin_cell()
                                .store_uint(op::query_denom, 32)
                                .store_uint(query_id, 64)
                                .store_ref(begin_cell()
                                    .store_slice(sender_address)
                                    .store_coins(jetton_amount)
                                    .store_uint(timeout, 64)
                                    .store_uint(remote_receiver_byte_len, 8)
                                    .store_uint(remote_receiver, remote_receiver_bits_len)
                                    .store_ref(memo)
                                    .store_ref(
                                        begin_cell()
                                            .store_slice(from_address)
                                        .end_cell())
                                .end_cell());
        cell body = bodyBuilder.end_cell();
        send_simple_message(0, whitelist_denom, body, CARRY_REMAINING_GAS);
        return ();
    }

    if (op == op::callback_denom) {
        throw_unless(error::unauthorized_sender, compare_address(whitelist_denom ,sender_address));
        int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
        slice ds = in_msg_body~load_ref().begin_parse();
        
        int existed = ds~load_int(8);
        throw_unless(error::unsupported_denom, existed);
        int is_root_from_ton = ds~load_int(8);
        
        slice token_wallet = ds~load_msg_addr();
        int amount = ds~load_coins();
        int timeout = ds~load_uint(64);
        
        int remote_receiver_byte_len = ds~load_uint(8);
        int remote_receiver_bits_len = remote_receiver_byte_len * 8;
        int remote_receiver_address = ds~load_uint(remote_receiver_bits_len);
        
        cell universal_swap_msg_cell = ds~load_ref();
        slice response_address = ds~load_ref().begin_parse();

        builder emit_data_builder = begin_cell()
                            .store_uint(op::send_to_cosmos, 32)
                            .store_uint(next_packet_seq, 64)
                            .store_uint(is_root_from_ton ? token_origin::ton : token_origin::cosmos, 32)
                            .store_uint(amount, 128)
                            .store_uint(timeout, 64)
                            .store_uint(remote_receiver_byte_len, 8)
                            .store_uint(remote_receiver_address, remote_receiver_bits_len)
                            .store_slice(token_wallet)
                            .store_ref(
                                begin_cell()
                                .store_slice(response_address) ;; local_sender
                                .end_cell());
        send_packets_from_ton~udict_set(64, next_packet_seq, emit_data_builder.end_cell().begin_parse());
        
        ;; append memo here for emitting events
        cell emit_data = emit_data_builder
                            .store_ref(universal_swap_msg_cell)
                            .end_cell();

        next_packet_seq = next_packet_seq + 1;
        ;; execute burn if not from ton
        if (is_root_from_ton == 0) {
            var msg_body = begin_cell()
                            .store_uint(op::burn(), 32)
                            .store_uint(query_id, 64)
                            .store_coins(amount)
                            .store_slice(response_address)
                            .end_cell();
            send_simple_message(0, token_wallet, msg_body, CARRY_REMAINING_GAS);
        } else {
            ;; should refund manually
            var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), IGNORE_ERRORS + CARRY_REMAINING_GAS);
        }

        emit_log_simple(my_address().slice_hash(), emit_data ,query_id);
        save_data();
        return ();
    }

    if (op == op::bridge_ton) {
        throw_unless(error::not_enough_gas, msg_value >= fee::bridge_ton);
        throw_unless(error::paused, paused == paused::unpaused);
        int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
        slice ds = in_msg_body~load_ref().begin_parse();
        int amount = ds~load_coins();
        int timeout = ds~load_uint(64);

        int remote_receiver_byte_len = ds~load_uint(8);
        int remote_receiver_bits_len = remote_receiver_byte_len * 8;
        int remote_receiver_address = ds~load_uint(remote_receiver_bits_len);
        
        cell memo = ds~load_ref();
        throw_unless(error::invalid_native_amount, msg_value > amount + fee::bridge_ton);
        int remaining_gas = msg_value - amount - fee::bridge_ton;
        
        builder emit_data_builder = begin_cell()
                            .store_uint(op::send_to_cosmos, 32)
                            .store_uint(next_packet_seq, 64)
                            .store_uint(token_origin::ton, 32)
                            .store_uint(amount, 128)
                            .store_uint(timeout, 64)
                            .store_uint(remote_receiver_byte_len, 8)
                            .store_uint(remote_receiver_address, remote_receiver_bits_len)
                            .store_uint(0, 2) ;; no jetton master
                            .store_ref(
                                begin_cell()
                                .store_slice(sender_address) ;; local_sender
                                .end_cell());

        send_packets_from_ton~udict_set(64, next_packet_seq, emit_data_builder.end_cell().begin_parse());
        
        cell emit_data = emit_data_builder
                            .store_ref(memo)
                            .end_cell();
        next_packet_seq = next_packet_seq + 1;

        emit_log_simple(my_address().slice_hash(), emit_data, query_id);

        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(sender_address)
            .store_coins(remaining_gas)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
        send_raw_message(msg.end_cell(), IGNORE_ERRORS + SEND_MODE_PAY_FEES_SEPARETELY);
        
        save_data();
        return ();
    }

    if (op == op::set_paused) {
        throw_unless(error::unauthorized_sender, compare_address(admin, sender_address));
        in_msg_body~load_uint(64); ;; skip query_id
        paused = in_msg_body~load_uint(1);
        save_data();
        return ();
    }

    if (op == op::upgrade_contract) {
        throw_unless(error::unauthorized_sender, compare_address(admin, sender_address));
        in_msg_body~load_uint(64); ;; skip query_id
        cell new_contract = in_msg_body~load_ref();
        set_code(new_contract);
        return ();
    }
    ;; deprecated
    if (op == op::change_jetton_wallet_code) {
        throw_unless(error::unauthorized_sender, compare_address(admin, sender_address));
        in_msg_body~load_uint(64); ;; skip query_id
        cell new_jetton_wallet_code = in_msg_body~load_ref();
        jetton_wallet_code = new_jetton_wallet_code;
        save_data();
        return ();
    }

    if (op == op::change_light_client_master) {
        throw_unless(error::unauthorized_sender, compare_address(admin, sender_address));
        in_msg_body~load_uint(64); ;; skip query_id
        light_client_master = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::change_admin) {
        throw_unless(error::unauthorized_sender, compare_address(admin, sender_address));
        in_msg_body~load_uint(64); ;; skip query_id
        admin = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

cell get_bridge_data() method_id {
    load_data();
    return begin_cell()
        .store_slice(light_client_master)
        .store_slice(admin)
        .store_slice(whitelist_denom)
        .store_uint(next_packet_seq, 64)
        .store_uint(paused, 1)
        .store_ref(bridge_wasm_smart_contract)
        .store_ref(jetton_wallet_code)
        .end_cell();
}

slice get_send_packet_commitment(int seq) method_id {
    load_data();
    (slice stored_packet_data, int exist) = send_packets_from_ton.udict_get?(64, seq);
    return stored_packet_data;
}
