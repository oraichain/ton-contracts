#include "common.fc";

int hash_from_tree_slice(tuple chunks)  {    
    int length = chunks.tlen();
    if (length == 0) { 
        ;; empty is 0 in bigint           
        return 0;
    }
    if(length == 1) {          
        return begin_cell().store_uint(prefix::leaf, 8)
            .store_slice(chunks.first())
            .end_cell()
            .begin_parse()
            .string_hash();            
    }
   
    int k = get_split_point(length);      
    int left = hash_from_tree_slice(chunks.slice_list(0, k));     
    int right = hash_from_tree_slice(chunks.slice_list(k, length));            
    
    return inner_hash(left, right);            
}

int hash_from_tree_proof(int leaf, tuple branch, slice positions) {
    int ind = 0;
    int root_hash = leaf;    
    while(ind < branch.tlen()){        
        int position = positions~load_uint(1);
        int item = branch.at(ind);
        ;; 0: right, 1: left
        if(position == 0) { 
            root_hash = inner_hash(root_hash, item);
        } else {
            root_hash = inner_hash(item, root_hash);
        }
        ind += 1;
    }
    return root_hash;
}