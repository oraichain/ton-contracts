#include "signer_info.fc";
#include "fee.fc";
#include "tip.fc";
#include "varint.fc";

;; ;; ds ->
;; ;;      signInfos: tuple => items: tuple (which is signInfo)
;; ;;      fee: tuple
;; ;;      tip: tuple
(int, tuple) auth_info::encode(slice sign_infos, slice fee, slice tip) {
    tuple result = empty_tuple();
    int length = 0;
    while (sign_infos.slice_refs_empty?() != -1) {
        slice next_ref = sign_infos~load_ref().begin_parse();
        slice sign_info = sign_infos~load_ref().begin_parse();
        (int encode_length, tuple encode_data) = signer_info::encode(sign_info);
        builder inner_cell = begin_cell();
        inner_cell = inner_cell
                        .store_slice(uvarint::encode(10))
                        .store_slice(uvarint::encode(encode_length));
        slice slice_result = inner_cell.end_cell().begin_parse();
        result~tpush(slice_result);
        length += encode_length + (slice_result.slice_bits() >> 3);
        int j = 0;
        while (j < encode_data.tlen()) {
            result~tpush(encode_data.at(j));
            j += 1;
        }
    }

    if (fee.slice_empty?() != -1) {
        builder inner_cell = begin_cell();
        slice fee_encode = fee::encode(fee);
        inner_cell = inner_cell
                        .store_slice(uvarint::encode(18))
                        .store_slice(uvarint::encode(fee_encode.slice_bits() >> 3));
        slice slice_result = inner_cell.end_cell().begin_parse();
        length += (slice_result.slice_bits() >> 3) + (fee_encode.slice_bits() >> 3);
        result~tpush(slice_result);
        result~tpush(fee_encode);
    }

    if (tip.slice_empty?() != -1) {
        builder inner_cell = begin_cell();
        slice tip_encode = tip::encode(tip);
        inner_cell = inner_cell
                        .store_slice(uvarint::encode(26))
                        .store_slice(uvarint::encode(tip_encode.slice_bits() >> 3));
        slice slice_result = inner_cell.end_cell().begin_parse();
        length += (slice_result.slice_bits() >> 3) + (tip_encode.slice_bits() >> 3);
        result~tpush(slice_result);
        result~tpush(tip_encode);
    }

    return (length, result);
}
