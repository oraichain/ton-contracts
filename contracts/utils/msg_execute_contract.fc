#include "coin.fc";
#include "varint.fc";
const msg_execute_contract::typeUrl = "/cosmwasm.wasm.v1.MsgExecuteContract";

slice msg_execute_contract::encode(slice sender_contract, slice msg, slice funds) {
    tuple return_tuple = empty_tuple();
    builder sender_contract_prefix_msg = begin_cell();
    slice sender = sender_contract~load_ref().begin_parse();
    slice contract  = sender_contract~load_ref().begin_parse();
  
    int sender_len = slice_bits(sender) >> 3;
    int contract_len = slice_bits(contract) >> 3;

    sender_contract_prefix_msg = sender_contract_prefix_msg
                                .store_slice(varuint::encode(10))
                                .store_slice(varuint::encode(sender_len))
                                .store_slice(sender)
                                .store_slice(varuint::encode(18))
                                .store_slice(varuint::encode(contract_len))
                                .store_slice(contract)
                                .store_slice(varuint::encode(26));

    int msg_size = 0;
    tuple msg_item_tuple = empty_tuple();
    ;; get msg len
    while(msg.slice_refs_empty?() != -1) {
        msg_size += msg.slice_bits() >> 3;
        msg_item_tuple~tpush(msg);
            slice next_ref = msg~load_ref().begin_parse();
        slice msg_chunk = next_ref;
        msg = next_ref;
    }
    return_tuple~tpush(sender_contract_prefix_msg.store_slice(varuint::encode(msg_size)).end_cell().begin_parse());

    int i = 0;
    while (i < msg_item_tuple.tlen()) {
        return_tuple~tpush(msg_item_tuple.at(i));
        i += 1;
    }

    while(funds.slice_refs_empty?() != -1) {
        slice next_ref = funds~load_ref().begin_parse();
        slice coin = funds~load_ref().begin_parse();
            builder coin_cell = begin_cell();
            coin_cell = coin_cell.store_slice(varuint::encode(42)).store_slice(varuint::encode(coin::encode_length(coin))).store_slice(coin::encode(coin));
        return_tuple~tpush(coin_cell.end_cell().begin_parse());
            funds = next_ref;
    }

    cell valueCell = begin_cell().end_cell();
    int len = return_tuple.tlen();
    int i = len - 1;

    while(i >= 0){
        slice inner_cell = return_tuple.at(i);
        if(valueCell.cell_depth() == 0){
            valueCell = begin_cell().store_ref(begin_cell().end_cell()).store_slice(inner_cell).end_cell();
        } else {
            valueCell = begin_cell().store_ref(valueCell).store_slice(inner_cell).end_cell();
        }
        i -= 1;
    }

    return valueCell.begin_parse();
}