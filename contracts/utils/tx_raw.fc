#include "auth_info.fc";
#include "tx_body.fc";
#include "varint.fc";
#include "msg_execute_contract.fc";

const not_msg_execute_error = 0x03;

;; if (message.body !== undefined) {
;;   TxBody.encode(message.body, writer.uint32(10).fork()).ldelim();
;; }
;; if (message.authInfo !== undefined) {
;;   AuthInfo.encode(message.authInfo, writer.uint32(18).fork()).ldelim();
;; }
;; for (const v of message.signatures) {
;;   writer.uint32(26).bytes(v!);
;; }
;; return writer;
(tuple, slice) tx_raw::encode(slice ds) impure {
    tuple return_tuple = empty_tuple();
    ;; load_data
    slice auth_info = ds~load_ref().begin_parse();
    slice tx_body = ds~load_ref().begin_parse();
    slice signatures = ds~load_ref().begin_parse();
  
    ;; auth_info extract
    slice sign_infos = auth_info~load_ref().begin_parse();
    slice fees = auth_info~load_ref().begin_parse();
    slice tip = auth_info~load_ref().begin_parse();


    ;; tx_body extract
    slice msgs = tx_body~load_ref().begin_parse();
    cell memo_and_timeout_height = tx_body~load_ref();
    cell ext_opts = tx_body~load_ref();
    cell non_critical_ext_opts = tx_body~load_ref();

   
    ;; encode msgs to execute_msg
    tuple encoded_execute_msg = empty_tuple();

    ;; build any object
    while(msgs.slice_refs_empty?() == 0){
        builder encoded_msg = begin_cell();
        slice next_ref = msgs~load_ref().begin_parse();
        slice msg = msgs~load_ref().begin_parse();
        slice msg_type_url = msg~load_ref().begin_parse();
        if(msg_type_url.equal_slices(msg_execute_contract::typeUrl) == -1){
            slice msg_value = msg~load_ref().begin_parse();
            slice sender_contract = msg_value~load_ref().begin_parse();
            slice msg_execute_contract = msg_value~load_ref().begin_parse();
            slice funds = msg_value~load_ref().begin_parse();
            slice chunk_value = msg_execute_contract::encode(sender_contract, msg_execute_contract, funds);
            encoded_msg = encoded_msg.store_ref(begin_cell().store_slice(msg_type_url).end_cell());
            encoded_msg = encoded_msg.store_ref(begin_cell().store_slice(chunk_value).end_cell());
            encoded_execute_msg~tpush(encoded_msg.end_cell());
        } else {
            throw(not_msg_execute_error);
        }
        msgs = next_ref;
    }

    ;;build encodedMessageCell
    cell messageCell = begin_cell().end_cell();
    int len = encoded_execute_msg.tlen();
    int i = len - 1;
    while(i >= 0){
        cell inner_cell = encoded_execute_msg.at(i);
        if(messageCell.cell_depth() == 0){
            messageCell = begin_cell().store_ref(begin_cell().end_cell()).store_ref(inner_cell).end_cell();
        } else {
            messageCell = begin_cell().store_ref(messageCell).store_ref(inner_cell).end_cell();
        }
        i -= 1;
    }
    ;; tx_body handle
    ;; tody encode the raw_msg
    slice tx_body = begin_cell()
                    .store_ref(messageCell)
                    .store_ref(memo_and_timeout_height)
                    .store_ref(ext_opts)
                    .store_ref(non_critical_ext_opts)
                    .end_cell().begin_parse();

    (int len, tuple tx_body_tuple, slice memo) = tx_body::encode(tx_body);
    
    slice tx_body_prefix_len = begin_cell()
                                .store_slice(varuint::encode(10))
                                .store_slice(varuint::encode(len))
                                .end_cell().begin_parse();

    return_tuple~tpush(tx_body_prefix_len);

    int i = 0;
    int tx_body_tuple_len = tx_body_tuple.tlen();
    while(i < tx_body_tuple_len){
        slice tx_chunk = tx_body_tuple.at(i);
        return_tuple~tpush(tx_chunk);
        i += 1;
    }

    ;; auth_info hanle
    (int auth_info_len, tuple auth_info_tuple) = auth_info::encode(sign_infos, fees, tip);

    slice auth_info_prefix_len = begin_cell()
                                .store_slice(varuint::encode(18))
                                .store_slice(varuint::encode(auth_info_len))
                                .end_cell().begin_parse();

    return_tuple~tpush(auth_info_prefix_len);

    int auth_info_len = auth_info_tuple.tlen();
    int i = 0;
    while(i < auth_info_len){
        slice auth_chunk = auth_info_tuple.at(i);
        return_tuple~tpush(auth_chunk);
        i += 1;
    }

    ;; signatures handle
    builder signature_builder = begin_cell()
                                .store_slice(varuint::encode(26))
                                .store_slice(varuint::encode(64)); ;; signature length

    ;; normaly we support single signature mode
    while(signatures.slice_refs_empty?() == 0){
        slice next_ref = signatures~load_ref().begin_parse();
        slice signature = signatures~load_ref().begin_parse();
        signature_builder = signature_builder.store_slice(signature~load_ref().begin_parse());
        signatures = next_ref;
    }
    slice chunk_signatures = signature_builder.end_cell().begin_parse();
    return_tuple~tpush(chunk_signatures);
    return (return_tuple, memo);
}