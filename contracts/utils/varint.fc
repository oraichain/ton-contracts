#include "../imports/math.fc";
#include "common.fc";


(int) encode_length(int signed,int n) {            
    if (signed) {
        n *= 2;
    }

    if (signed == false) {
        if (n < 0) {
            throw(0xffff);
        }
    }    
    int bits = math::log2(n + 1);
    return (bits / 7 + 1) >> 0;
}

(int) int::encode_length(int n) {       
    return encode_length(-1, n);
}

(int) uint::encode_length(int n) {       
    return encode_length(0, n);
}

;; function VarInt (signed) {
;;   function decode (buffer, start = 0, end = buffer.length) {
;;     throw Error('not implemented')
;;   }

;;   function encode (n, buffer = Buffer.alloc(encodingLength(n)), offset = 0) {
;;     n = safeParseInt(n)

;;     // amino signed varint is multiplied by 2 ¯\_(ツ)_/¯
;;     if (signed) n *= 2

;;     let i = 0
;;     while (n >= 0x80) {
;;       buffer[offset + i] = (n & 0xff) | 0x80
;;       n >>= 7
;;       i++
;;     }
;;     buffer[offset + i] = n & 0xff
;;     encode.bytes = i + 1
;;     return buffer
;;   }

;;   function encodingLength (n) {
;;     n = safeParseInt(n)
    
;;     if (signed) n *= 2
;;     if ((!signed && n < 0) || Math.abs(n) > Number.MAX_SAFE_INTEGER) {
;;       throw Error('varint value is out of bounds')
;;     }
;;     let bits = Math.log2(n + 1)
;;     return Math.ceil(bits / 7) || 1
;;   }

;;   return { encode, decode, encodingLength }
;; }


