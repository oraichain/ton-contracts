#include "../imports/math.fc";
#include "common.fc";


(int) varint::encode_length(int signed,int n) {            
    if (signed) {
        n *= 2;
    }

    if (signed == false) {
        if (n < 0) {
            throw(0xffff);
        }
    }    
    int bits = math::log2(n + 1);
    return (bits / 7 + 1) >> 0;
}

(slice) varint::encode(int signed, int n) {
    int length = varint::encode_length(signed, n);
    ;; create a new empty builder
    builder inner_cell = begin_cell(); 
    ;; amino signed varint is multiplied by 2 ¯\_(ツ)_/¯
    if (signed) {
        n *= 2;
    }
    
    
    while (n >= 0x80) {
        inner_cell = inner_cell.store_uint(n & 0xff | 0x80, 8);
        n >>= 7;      
        
    }
    
    inner_cell = inner_cell.store_uint(n & 0xff, 8);
    ~dump(n);
    ~dump(n & 0xff);

    return inner_cell.end_cell().begin_parse();    
}
