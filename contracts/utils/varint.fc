#include "../imports/stdlib.fc";
#include "common.fc";
#include "uint64_le.fc";


int varint::encode_length(int signed,int n) {            
    if (signed) {
        n *= 2;
    }

    if (signed == false) {
        if (n < 0) {
            throw(0xffff);
        }
    }    
    int bits = log2(n + 1);
    return (bits / 7 + 1) >> 0;
}

slice varint::encode(int signed, int n) {
    int length = varint::encode_length(signed, n);
    ;; create a new empty builder
    builder inner_cell = begin_cell(); 
    ;; amino signed varint is multiplied by 2 ¯\_(ツ)_/¯
    if (signed) {
        n *= 2;
    }
    
    while (n >= 0x80) {
        inner_cell = inner_cell.store_uint(n & 0xff | 0x80, 8);
        n >>= 7;
    }
    inner_cell = inner_cell.store_uint(n & 0xff,8);   
    return inner_cell.end_cell().begin_parse();
}


int varuint::encode_length(int n) inline_ref {
    return varint::encode_length(0, n);
}

slice varuint::encode(int n) inline_ref {
    return varint::encode(0, n);
}

slice uvarint_64::encode(int n) inline_ref {
    (int lo, int hi) = n.uint_high_low();
    builder inner_cell = begin_cell();
    while(hi > 0){
        inner_cell = inner_cell.store_uint(lo & 0xff | 0x80, 8);
        lo = (lo >> 7 | hi << 25) >> 0;
        hi >>= 7;
    }
    while(lo > 0xff){
        inner_cell = inner_cell.store_uint(lo & 0xff | 0x80, 8);
        lo >>= 7;
    }
    return inner_cell.end_cell().begin_parse();
}