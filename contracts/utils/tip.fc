#include "coin.fc";

builder tip::encode_core(slice ds) {
    slice amounts = ds~load_ref().begin_parse();
    slice tipper = ds~load_ref().begin_parse();
    builder inner_cell = begin_cell();
    while (amounts.slice_refs_empty?() == 0) {
        slice next_ref = amounts~load_ref().begin_parse();
        slice coin_data = amounts~load_ref().begin_parse();
        slice coin_data_encode = coin::encode(coin_data);
        inner_cell = inner_cell
                        .store_uint(10, 8)
                        .store_uint(coin_data_encode.slice_bits() >> 3, 8)
                        .store_slice(coin_data_encode);
        amounts = next_ref;
    }

    if (tipper.slice_empty?() != -1) {
        int tipper_length = tipper.slice_bits() >> 3;
        inner_cell = inner_cell.store_uint(18, 8).store_uint(tipper_length, 8).store_slice(tipper);
    }
    return inner_cell;
}

slice tip::encode(slice ds) {
    return tip::encode_core(ds).end_cell().begin_parse();
}

int tip::encode_length(slice ds) {
    slice result = tip::encode_core(ds).end_cell().begin_parse();
    return result.slice_bits() >> 3;
}