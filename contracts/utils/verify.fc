#include "canonical_vote.fc";
#include "varbuffer.fc";
#include "common.fc";
#include "merkleize.fc";

const VERIFY_ERROR_UNKNOWN_BLOCKID_FLAG = 3001;

const int PrecommitType = 2;
const int BlockIDFlagAbsent = 1;
const int BlockIDFlagCommit = 2;
const int BlockIDFlagNil = 3;

slice verify::get_vote_sign_bytes(slice vote){
    int vote_type = vote~load_uint(32);
    int height = vote~load_uint(32);
    int round = vote~load_uint(32);
    slice block_id = vote~load_ref().begin_parse();
    slice timestamp = vote~load_ref().begin_parse();
    slice chain_id = vote~load_ref().begin_parse();
    slice encoded =  canonical_vote::encode(vote_type, height, round, block_id, timestamp, chain_id);
    return varbuffer::encode(encoded);

}

int verify::verify_commit_sigs(slice header, tuple commit, tuple validators){
    ;; header
    slice version = header~load_ref().begin_parse();
    slice chain_id = header~load_ref().begin_parse();
    int height = header~load_uint(32);
    slice time = header~load_ref().begin_parse();
    slice last_block_id = header~load_ref().begin_parse();

    ;; validators
    int committed_voting_power = 0;
    int total_voting_power = 0;
    cell validators_by_address = new_dict();
    int validators_len = validators.tlen();

    
    ;; build validator map
    int i = 0;
    while(i < validators_len){
        slice validator_i =  validators.at(i);
        int address = validator_i~load_uint(160);
        validators_by_address~udict_set(160, address, validator_i);
        int voting_power = validator_i~load_uint(32);
        total_voting_power += voting_power;
        i += 1;
    }

    ;; hanle commit
    int height = commit.at(0);
    int round = commit.at(1);
    slice block_id = commit.at(2);
    tuple signatures = commit.at(3);
    int signatures_len = signatures.tlen();

    ;;iterate signatures commit
    int i = 0;
    while(i < signatures_len){
        slice cs = signatures.at(i);
        int cs_bits_len = slice_bits(cs);

        if(cs_bits_len >= 8 + 160 + 512) {
            int block_id_flag = cs~load_uint(8);
            int validator_address = cs~load_uint(160);
            slice signatures = cs~load_bits(512);
            slice timestamp = cs~load_ref().begin_parse();

            ;; check block_id_flag
            int is_commit = block_id_flag == BlockIDFlagCommit;
            int is_nil = block_id_flag == BlockIDFlagNil;
            int is_absent = block_id_flag == BlockIDFlagAbsent;
            throw_if(VERIFY_ERROR_UNKNOWN_BLOCKID_FLAG, is_commit + is_nil + is_absent == 0);

            (slice validator, int is_exist) = validators_by_address.udict_get?(160, validator_address);

            if(is_exist == -1){
                slice vote = begin_cell()
                        .store_uint(PrecommitType, 32)
                        .store_uint(height, 32)
                        .store_uint(round, 32)
                        .store_ref(begin_cell().store_slice(last_block_id).end_cell())
                        .store_ref(begin_cell().store_slice(timestamp).end_cell())
                        .store_ref(begin_cell().store_slice(chain_id).end_cell())
                        .end_cell()
                        .begin_parse();
                        
                slice sign_bytes = verify::get_vote_sign_bytes(vote);
                slice pubkey = validator~load_ref().begin_parse();

                int verify_pubkey = pubkey~load_uint(256);

                int is_valid = check_data_signature(sign_bytes, signatures, verify_pubkey);
                
                if(is_valid){
                    committed_voting_power += validator~load_uint(32);
                }
            }
        }
        i += 1;

    }

    int two_thirds = total_voting_power * 2 / 3;

    if(committed_voting_power < two_thirds){
        return 0;
    } 

    return -1;
}


int verify::verify_tx(tuple proofs, slice positions, slice data_hash, tuple auth_info, tuple tx_body, tuple signatures) {
    int tx_hash = begin_cell()
                    .store_uint(prefix::leaf, 8)
                    .store_uint(calculate_tx_hash(auth_info, tx_body, signatures), 256)
                    .end_cell()
                    .begin_parse()
                    .string_hash();
    int calculate_data_hash = hash_from_tree_proof(tx_hash, proofs, positions);
    if (data_hash~load_uint(256) == calculate_data_hash) {
        return -1;
    }
    return 0;
}