#include "./coin.fc";
#include "varint.fc";

;; if we need more than 1023 bit => should convert return type from slice to builder
builder fee::encode_core(slice ds) {
    slice amount_data = ds~load_ref().begin_parse();
    slice gas_limit = ds~load_ref().begin_parse();
    slice payer = ds~load_ref().begin_parse();
    slice granter = ds~load_ref().begin_parse();

    builder inner_cell = begin_cell();
    while (amount_data.slice_refs_empty?() == 0) {
        slice next_ref = amount_data~load_ref().begin_parse();
        slice coin_data = amount_data~load_ref().begin_parse();
        inner_cell = inner_cell
                        .store_slice(varuint::encode(10))
                        .store_slice(varuint::encode(coin::encode_length(coin_data)))
                        .store_slice(coin::encode(coin_data));
        amount_data = next_ref;
    }

    if (gas_limit.slice_empty?() != -1) {
        inner_cell = inner_cell
                        .store_slice(varuint::encode(16))
                        .store_slice(gas_limit);
    }

    if (payer.slice_empty?() != -1) {
        int payer_length = payer.slice_bits() >> 3;
        inner_cell = inner_cell
                        .store_slice(varuint::encode(26))
                        .store_slice(varuint::encode(payer_length))
                        .store_slice(payer);
    }

    if (granter.slice_empty?() != -1) {
        int granter_length = granter.slice_bits() >> 3;
        inner_cell = inner_cell
                        .store_slice(varuint::encode(34))
                        .store_slice(varuint::encode(granter_length))
                        .store_slice(granter);
    }

    return inner_cell;
}

;; only use this when the size < 1023 bits
slice fee::encode(slice ds) {
    return fee::encode_core(ds).end_cell().begin_parse();
}

int fee::encode_length(slice ds) {
    slice result = fee::encode_core(ds).end_cell().begin_parse();
    return result.slice_bits() >> 3;
}