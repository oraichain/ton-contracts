#include "common.fc";
#include "uint64_le.fc";
#include "blockid.fc";
#include "time.fc";
#include "varbuffer.fc";

slice canonical_vote::encode(
    int vote_type, 
    int height, 
    int round, 
    slice block_id,
    slice timestamp,
    slice chain_id
){

    builder inner_cell = begin_cell();
    
    if(vote_type != 0){
        inner_cell = inner_cell.store_uint(prefix::number, 8)
            .store_uint(vote_type, 8);
    }
    
    ~dump(height);
    if(height > 0){
        inner_cell = inner_cell.store_uint(0x11,8)
            .store_slice(uint64le::encode(height));       
    }
    ~dump(height);

    if(round > 0){
        inner_cell = inner_cell.store_uint(0x19, 8)
            .store_slice(uint64le::encode(round));       
    }


    if(block_id.slice_empty?() != -1){        
        inner_cell = inner_cell.store_uint(0x22, 8)          
            .store_uint(blockid::encode_length(block_id), 8)
            .store_slice(blockid::encode(block_id));          
        
    }


    ;; time field
    inner_cell = inner_cell.store_uint(0x2a, 8)
        .store_uint(time::encode_length(timestamp), 8)
        .store_slice(time::encode(timestamp));   
   

    ;; chain_id field    
    inner_cell = inner_cell.store_uint(0x32, 8)
        .store_uint(slice_bits(chain_id) >> 3, 8)
        .store_slice(chain_id);

    
    return inner_cell.end_cell().begin_parse();
}