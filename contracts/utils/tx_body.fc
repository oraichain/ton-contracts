#include "varint.fc";
#include "any_google.fc";
#include "helper.fc";

;; return encode_len and tuple
(int, tuple) tx_body::encode(slice tx_body){
    ~dump(tx_body);
    cell messages = tx_body~load_ref();
    slice memo_and_timeout_height = tx_body~load_ref().begin_parse();
    cell ext_opts = tx_body~load_ref();
    cell non_critical_ext_opts = tx_body~load_ref();

    ;; return 
    tuple return_tuple = empty_tuple();
    int tx_body_len = 0;

    slice message = messages.begin_parse();
    while(message.slice_refs_empty?() == 0){
        builder message_builder = begin_cell();
        message_builder = message_builder.store_slice(uvarint::encode(10));

        (int any_len, slice encode_type_url, tuple value_encoded) = any::encode(message);
     
        slice pre_encoded = message_builder
                                .store_slice(uvarint::encode(any_len))
                                .end_cell().begin_parse();

        tx_body_len += pre_encoded.slice_bits() >> 3;

        return_tuple~tpush(pre_encoded);
        return_tuple~tpush(encode_type_url);

        int j = 0;
        int value_encoded_len = value_encoded.tlen();
        
        ;; flat all value to return_tuple
        while(j < value_encoded_len){
            return_tuple~tpush(value_encoded.at(j));
            ~dump(j);
            j += 1;
        }

        tx_body_len += any_len;
        message = message~load_ref().begin_parse();
    }
    
    builder memo_and_timeout_height_builder = begin_cell();

    if(memo_and_timeout_height.slice_empty?() != -1){
        slice memo = memo_and_timeout_height~load_ref().begin_parse();
        int timeout_height = memo_and_timeout_height~load_uint(8 * 64); ;;64 bytes
       
        if(memo.slice_empty?() != -1){
            memo_and_timeout_height_builder = memo_and_timeout_height_builder.store_slice(uvarint::encode(18)).store_slice(memo);
           
        }

        if(memo.slice_empty?() != -1){
            memo_and_timeout_height_builder = memo_and_timeout_height_builder.store_slice(uvarint::encode(24));
            memo_and_timeout_height_builder = memo_and_timeout_height_builder.store_slice(uvarint_64::encode(timeout_height));
        }

    }

    slice memo_and_timeout_height_slice = memo_and_timeout_height_builder
                                            .end_cell()
                                            .begin_parse();

    if(memo_and_timeout_height_slice.slice_empty?() != -1){
        return_tuple~tpush(memo_and_timeout_height_slice);
        tx_body_len += slice_bits(memo_and_timeout_height_slice) >> 3;
    }
    
   
    slice ext_opt = ext_opts.begin_parse();

    while(ext_opt.slice_refs_empty?() == 0){
        builder ext_opt_builder = begin_cell();
        ext_opt_builder = ext_opt_builder.store_slice(uvarint::encode(8186));
        (int any_len, slice encode_type_url, tuple value_encoded) = any::encode(ext_opt);
        slice pre_encoded = ext_opt_builder
                                .store_slice(uvarint::encode(any_len))
                                .end_cell()
                                .begin_parse();

        tx_body_len += pre_encoded.slice_bits() >> 3;
        
        return_tuple~tpush(pre_encoded);
        return_tuple~tpush(encode_type_url);

        int j = 0;
        int value_encoded_len = value_encoded.tlen();
        ;; append all value to return_tuple
        while(j < value_encoded_len){
            return_tuple~tpush(value_encoded.at(j));
            j += 1;
        }
        tx_body_len += any_len;

        ext_opt = ext_opt~load_ref().begin_parse();
    }


    slice non_critical_ext_opt = non_critical_ext_opts.begin_parse();

    while(non_critical_ext_opt.slice_refs_empty?() == 0){
        builder non_critical_ext_opts_builder = begin_cell();
        non_critical_ext_opts_builder = non_critical_ext_opts_builder.store_slice(uvarint::encode(16378));
        (int any_len, slice encode_type_url, tuple value_encoded) = any::encode(non_critical_ext_opt);

        slice pre_encoded = non_critical_ext_opts_builder
                            .store_slice(uvarint::encode(any_len))
                            .end_cell()
                            .begin_parse();

        tx_body_len += pre_encoded.slice_bits() >> 3;

        return_tuple~tpush(pre_encoded);
        return_tuple~tpush(encode_type_url);

        int j = 0;
        int value_encoded_len = value_encoded.tlen();
        ;; append all value to return_tuple
        while(j < value_encoded_len){
            return_tuple~tpush(value_encoded.at(j));
            j += 1;
        }
        tx_body_len += any_len;

        non_critical_ext_opt = non_critical_ext_opt~load_ref().begin_parse();
    }

    return (tx_body_len, return_tuple);
}