#include "varint.fc";

;; cell {
;;   hash: cell,
;;   cell: {
;;     parts: uint,
;;     hash: cell,
;;   }
;; }

(int) blockid::encode_length(cell data) { 
    int length = 0;
    var dv = data.begin_parse();           

    cell hash = dv~load_ref();
    slice hash_slice = hash.begin_parse();
    if (hash_slice.slice_empty?() != -1) {
        int hash_length = (hash_slice.slice_bits() >> 3) + 2;
        length += hash_length;
    }

    cell parts = dv~load_ref();
    slice parts_slice = parts.begin_parse();
    if (parts_slice.slice_empty?() != -1) {
        int total = parts_slice~load_uint(32);
        cell hash = parts_slice~load_ref();

        slice hash_slice = hash.begin_parse();
        if (hash_slice.slice_empty?() != -1) {
            int hash_length = (hash_slice.slice_bits() >> 3) + 6;
            length += hash_length;
        }
    }

    return length;
}

(slice) blockid::encode(cell data) {
    var dv = data.begin_parse();           
    cell hash = dv~load_ref();
    slice hash_slice = hash.begin_parse();

    builder buffer = begin_cell();
    if (hash_slice.slice_empty?() != -1) {
        int hash_str_length = (hash_slice.slice_bits() >> 3);
        buffer = buffer.store_uint(10, 8).store_uint(hash_str_length, 8).store_slice(hash_slice);
    }

    cell parts = dv~load_ref();
    slice parts_slice = parts.begin_parse();
    if (parts_slice.slice_empty?() != -1) {
        int total = parts_slice~load_uint(32);
        cell hash = parts_slice~load_ref();

        slice hash_slice = hash.begin_parse();
        if (hash_slice.slice_empty?() != -1) {
            int parts_str_length = (hash_slice.slice_bits() >> 3) + 4;
            buffer = buffer
                        .store_uint(18, 8)
                        .store_uint(parts_str_length, 8)
                        .store_uint(8, 8)
                        .store_uint(total, 8)
                        .store_uint(18, 8)
                        .store_uint(parts_str_length - 4, 8)
                        .store_slice(hash_slice);
        }
    }
    return buffer.end_cell().begin_parse();
}
