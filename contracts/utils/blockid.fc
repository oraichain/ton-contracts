#include "varint.fc";

;; cell {
;;   hash: cell,
;;   cell: {
;;     parts: uint,
;;     hash: cell,
;;   }
;; }

;; encodingLength(value) {
;;     let length = 0;
;;     if (value.hash) length += value.hash.length / 2 + 2;
;;     if (value.parts && value.parts.hash) {
;;       length += value.parts.hash.length / 2 + 6;
;;     }
;;     return length;
;;   },
(int) blockid::encode_length(cell data) { 
    int length = 0;
    var dv = data.begin_parse();           
    cell hash = dv~load_ref();

    slice hash_slice = hash.begin_parse();
    if (hash_slice.slice_empty?() != -1) {
        int hash_length = (hash_slice.slice_bits() >> 3) + 2;
        length += hash_length;
    }

    cell parts = dv~load_ref();
    slice parts_slice = parts.begin_parse();
    if (parts_slice.slice_empty?() != -1) {
        int total = parts_slice~load_uint(32);
        cell hash = parts_slice~load_ref();

        slice hash_slice = hash.begin_parse();
        if (hash_slice.slice_empty?() != -1) {
            int hash_length = (hash_slice.slice_bits() >> 3) + 6;
            length += hash_length;
        }
    }

    return length;
}

