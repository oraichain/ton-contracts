#include "varint.fc";

int blockid::encode_length(slice ds) inline {     
    int length = 0; 
    int hash_slice = ds~load_uint(256);    
    int parts_slice = ds~load_uint(256);   
    if(hash_slice != 0){
        length += 32 + 2;
    }   
    if(parts_slice != 0) {
        length += 32 + 6;
    }

    return length;
}

builder blockid::inner_encode(int hash_slice, int parts_slice, int total) {               

    builder inner_cell = begin_cell();

    if(hash_slice != 0){
        inner_cell = inner_cell.store_uint(10, 8)
            .store_uint(32, 8)
            .store_uint(hash_slice, 256);
    }
    
    if(parts_slice != 0){
        inner_cell = inner_cell.store_uint(0x12, 8)
            .store_uint(32 + 4, 8)
            .store_uint(0x08, 8)
            .store_uint(total, 8)
            .store_uint(0x12, 8)
            .store_uint(32, 8)
            .store_uint(parts_slice, 256);
    }

    return inner_cell;
}

slice blockid::encode(slice ds) {
    int hash_slice = ds~load_uint(256);    
    int parts_slice = ds~load_uint(256);    
    int total = ds~load_uint(8);                

    builder inner_cell = blockid::inner_encode(hash_slice, parts_slice, total);

    return inner_cell.end_cell().begin_parse();
}
