#include "./varint.fc";

;; Time: https://github.com/oraichain/js-tendermint/blob/99d976bbdbe0ffa20b198707754b760c705e1c65/src/types.js#L29-L81
int time::encode_length(cell value){
    var ds = value.begin_parse();
    var length = 0;

    if(ds.slice_empty?() != -1){
        length += 1 + varint::encode_length(0, ds~load_uint(32));
    }

    if(ds.slice_empty?() != -1){
        length += 1 + varint::encode_length(0, ds~load_uint(32));
    }

    return length;
}

slice time::encode(cell value){
    builder inner_cell = begin_cell();
    var ds = value.begin_parse();
  
    if(ds.slice_empty?() != -1){
        int seconds = ds~load_uint(32);
        if (seconds != 0) {
            inner_cell~store_uint(0x08, 8);
            int seconds_encode_length =  varint::encode_length(0, seconds);
            var encode_seconds = varint::encode(0, seconds);
            int offset = 0;

            while(offset < seconds_encode_length){
                int uint8_bytes = encode_seconds~load_uint(8);
                inner_cell = inner_cell.store_uint(uint8_bytes,8);
                offset += 1;
            }
        }
    }

    if(ds.slice_empty?() != -1){
        int nanoseconds = ds~load_uint(32);
        if (nanoseconds != 0) {
            inner_cell~store_uint(0x10, 8);
            int nanoseconds_encode_length = varint::encode_length(0, nanoseconds);
            var encode_nanoseconds = varint::encode(0, nanoseconds);
            int offset = 0;

            while(offset < nanoseconds_encode_length){
                int uint8_bytes = encode_nanoseconds~load_uint(8);
                inner_cell = inner_cell.store_uint(uint8_bytes,8);
                offset += 1;
            }
        }
    }

    return inner_cell.end_cell().begin_parse();
}

