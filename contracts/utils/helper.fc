slice get_validator_hash(slice header) inline_ref {
    header~load_ref().begin_parse();
    slice first_hashes = header~load_ref().begin_parse();
    slice last_commit_hash = first_hashes~load_ref().begin_parse();
    slice data_hash = first_hashes~load_ref().begin_parse();
    slice validators_hash = first_hashes~load_ref().begin_parse();
    return validators_hash;
}

;; return_type (height, chain_id, next_validator_hash)
(int, slice, slice, slice) get_data_from_header(slice header) inline_ref {
    slice inner_header = header~load_ref().begin_parse();
    slice version = inner_header~load_ref().begin_parse();
    slice chain_id = inner_header~load_ref().begin_parse();
    int height = inner_header~load_uint(32);
    slice time = inner_header~load_ref().begin_parse();
    slice block_id = inner_header~load_ref().begin_parse();
    slice first_hashes = header~load_ref().begin_parse();
    slice last_commit_hash = first_hashes~load_ref().begin_parse();
    slice data_hash = first_hashes~load_ref().begin_parse();
    slice validators_hash = first_hashes~load_ref().begin_parse();
    return (height, chain_id, data_hash, validators_hash);
}


int equal_slice? (slice a, slice b) {
    return a.slice_hash() == b.slice_hash();
}

(slice, slice) cs_hex_to_tuple_string(slice hex){
    builder front_slice = begin_cell();
    builder back_slice = begin_cell();

    int len = (hex.slice_bits() >> 3) / 2;
            
    int i = 0;
    while (i < len) {
        int number = hex~load_uint(8);
        int quotient = number / 16;
        int remainder = number - quotient * 16;

        if (quotient >= 10) {
            quotient += 55;
        } else {
            quotient += 48;
        }
        if (remainder >= 10) {
            remainder += 55;
        } else {
            remainder += 48;
        }
        front_slice = front_slice.store_uint(quotient, 8).store_uint(remainder, 8);
        i += 1;
    }

    while (hex.slice_empty?() != -1) {
        int number = hex~load_uint(8);
        int quotient = number / 16;
        int remainder = number - quotient * 16;

        if (quotient >= 10) {
            quotient += 55;
        } else {
            quotient += 48;
        }
        if (remainder >= 10) {
            remainder += 55;
        } else {
            remainder += 48;
        }
        back_slice = back_slice.store_uint(quotient, 8).store_uint(remainder, 8);
    }

    return (front_slice.end_cell().begin_parse(), back_slice.end_cell().begin_parse());
}