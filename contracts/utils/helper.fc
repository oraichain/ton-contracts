tuple build_block_proof_params(slice ds) {
    tuple header_tuple = empty_tuple?();
    slice header_data = ds~load_ref().begin_parse();
    while (header_data.slice_refs_empty() == 0) {
        header_data = header_data~load_ref().begin_parse();
        header_tuple~tpush(header_data);
    }

    tuple commit_tuple = empty_tuple?();
    slice commit_data = ds~load_ref().begin_parse();
    slice commit_height = commit_data~load_ref().begin_parse();
    slice commit_round = commit_data~load_ref().begin_parse();
    slice commit_block_id = commit_data~load_ref().begin_parse();
    slice commit_signatures = commit_data~load_ref().begin_parse();
    tuple signatures = empty_tuple?();
    while (commit_signatures.slice_refs_empty() == 0) {
        commit_signatures = commit_signatures~load_ref().begin_parse();
        signatures~tpush(commit_signatures);
    }
    commit_tuple~tpush(commit_height);
    commit_tuple~tpush(commit_round);
    commit_tuple~tpush(commit_block_id);
    commit_tuple~tpush(signatures);

    tuple validators_tuple = empty_tuple?();
    slice validators_data = ds~load_ref().begin_parse();
    while (validators_data.slice_refs_empty() == 0) {
        validators_data = validators_data~load_ref().begin_parse();
        validators_tuple~tpush(validators_data);
    }

    tuple result = empty_tuple?();
    result~tpush(header_tuple);
    result~tpush(commit_tuple);
    result~tpush(validators_tuple);
    return result;
}

tuple build_tx_proof_params(slice ds) {
    tuple proofs = empty_tuple?();
    slice proof_data = ds~load_ref().begin_parse();
    while (proof_data.slice_refs_empty() == 0) {
        proof_data = proof_data~load_ref().begin_parse();
        proofs~tpush(proof_data);
    }
    slice positions = ds~load_ref().begin_parse();
    tuple result = empty_tuple?();
    result~tpush(proofs);
    result~tpush(positions);
    return result;
}

tuple build_auth_info_params(slice ds) {
    tuple sign_infos = empty_tuple?();
    slice sign_infos_data = ds~load_ref().begin_parse();
    ;; while (sign_infos_data.slice_refs_empty() == 0) {
    ;;     sign_infos_data = sign_infos_data~load_ref().begin_parse();
    ;;     tuple sign_info = empty_tuple?();
    ;;     slice type_url = sign_infos_data
    ;; }
    slice fee_data = ds~load_ref().begin_parse();
    slice tip_data = ds~load_ref().begin_parse();

}

tuple build_tx_raw_params(slice ds) {

}

(tuple, tuple, tuple) build_execute_transaction_params(slice ds) {
    tuple block_proof = empty_tuple?();
    tuple tx_proof = empty_tuple?();
    tuple tx = empty_tuple?();

    ;; Build Block Proof
    tuple block_proof = build_block_proof_params(ds);

    ;; Build Tx Proof
    slice tx_data = ds~load_ref().begin_parse();

}