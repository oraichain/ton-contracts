#include "imports/stdlib.fc";
#include "utils/verify.fc";
#include "static/errors.fc";
#include "static/op_codes.fc";
#include "utils/messages.fc";
#include "utils/helper.fc";
#include "static/state.fc";
#include "utils/validator_hash_input.fc";
#include "utils/merkleize.fc";
#include "utils/tx_raw.fc";
#include "common/messages.fc";
#include "common/address.fc";

;; store in a header_ref
global int height;
global slice chain_id;
global slice data_hash;
global cell validator;

;; trusting
global int trusting_period;
global int created_at;

;; owner
global slice light_client_master_address;

() preload_data(slice ds) impure {
    height = ds~load_uint(64);
    chain_id = ds~load_ref().begin_parse();
    data_hash = ds~load_ref().begin_parse();
    validator = ds~load_ref();

    trusting_period = ds~load_uint(32);
    created_at = ds~load_uint(32);
    light_client_master_address = ds~load_msg_addr();
    ds.end_parse();
}

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();
    preload_data(ds);
}

(cell) presave_data() {
    cell cell_data = begin_cell()
                        .store_uint(height, 64)
                        .store_uint(trusting_period, 32)
                        .store_uint(created_at, 32)
                        .store_slice(light_client_master_address)
                        .store_ref(begin_cell().store_slice(chain_id).end_cell())
                        .store_ref(begin_cell().store_slice(data_hash).end_cell())
                        .store_ref(validator)
                        .end_cell();
    
    return cell_data;
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
    set_data(
        presave_data()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
        return ();
    }

    slice cs = in_msg_full.begin_parse();
   
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::verify_on_trusted_sigs) {
        throw_if(error::invalid_sender, compare_address(sender_address, light_client_master_address) != -1);
        slice msg = in_msg_body~load_ref().begin_parse();
        slice response_address = msg~load_msg_addr();
        cell ds = msg~load_ref();
        (cell header, _, cell commit) = parse_verify_light_client_body(ds.begin_parse());
        slice slice_header = header.begin_parse();
        slice inner_header = slice_header~load_ref().begin_parse();
        int height = inner_header~load_uint(32);
        int result = 0;

        result = verify::verify_single_optimized_commit_builder(
            height,
            chain_id,
            commit.begin_parse(),
            validator.begin_parse()
        );

        throw_if(error::invalid_verify_sigs, result != -1);
        
        builder bodyBuilder = begin_cell();
        bodyBuilder = bodyBuilder 
                    .store_uint(op::create_new_light_client, 32)
                    .store_uint(query_id, 64)
                    .store_ref(begin_cell()
                                .store_slice(response_address)
                                .store_ref(ds)
                    .end_cell());
        cell body = bodyBuilder.end_cell();
        send_simple_message(0, sender_address, body, CARRY_REMAINING_GAS);
        return ();
    }

    if (op == op::update_light_client_state) {
        throw_if(error::invalid_sender, compare_address(sender_address, light_client_master_address) != -1);
        slice msg = in_msg_body~load_ref().begin_parse();
        slice response_address = msg~load_msg_addr();
        cell ds = msg~load_ref();
        (cell header, cell validators, _) = parse_verify_light_client_body(ds.begin_parse());
        (_, chain_id, data_hash, _) = get_data_from_header(header.begin_parse());
        validator = validators;
        created_at = now();
        save_data();

        builder bodyBuilder = begin_cell();
        bodyBuilder = bodyBuilder 
                    .store_uint(op::finalize_verify_light_client, 32)
                    .store_uint(query_id, 64)
                    .store_ref(begin_cell()
                                .store_slice(response_address)
                                .store_ref(ds)
                    .end_cell());
        send_simple_message(0, sender_address, bodyBuilder.end_cell(), CARRY_REMAINING_GAS);
        return();
    }

    if (op == op::verify_receipt) {
        slice body = in_msg_body~load_ref().begin_parse();
        int receipt_height = body~load_uint(64);
        slice response_address = body~load_msg_addr();
        slice tx_raw = body~load_ref().begin_parse();
        slice proofs = body~load_ref().begin_parse();
        slice positions =  body~load_ref().begin_parse();
        slice data =  body~load_ref().begin_parse();
        throw_if(error::invalid_height, receipt_height != height);
        (tuple encode_tx_raw, _) = tx_raw::encode(tx_raw);
        int tx_hash = begin_cell()
                    .store_uint(prefix::leaf, 8)
                    .store_uint(digest_hash(encode_tx_raw), 256)
                    .end_cell()
                    .begin_parse()
                    .string_hash();
        int calculate_data_hash = hash_from_tree_proof_ref(proofs, tx_hash, positions);
     
        (_, int value) = data_hash.load_uint(256);
        throw_if(error::invalid_verify_receipt, value != calculate_data_hash);
       
        cell body = begin_cell()
                        .store_uint(op::confirm_tx, 32)
                        .store_uint(query_id, 64)
                        .store_slice(data)
                        .store_ref(begin_cell().store_slice(response_address).end_cell())
                    .end_cell();

        send_simple_message(0, sender_address, body, CARRY_REMAINING_GAS);
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

int get_height() method_id {
    load_data();
    return height;
}

slice get_chain_id() method_id {
    load_data();
    return chain_id;
}

slice get_data_hash() method_id {
    load_data();
    return data_hash;
}
