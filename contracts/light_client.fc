#include "imports/stdlib.fc";
#include "utils/verify.fc";
#include "static/errors.fc";
#include "static/op_codes.fc";
#include "utils/messages.fc";
#include "utils/helper.fc";
#include "static/state.fc";
#include "utils/validator_hash_input.fc";
#include "utils/merkleize.fc";
#include "utils/tx_raw.fc";
#include "common/messages.fc";


;; storage variables
;; 0: false, 1: true
global int validator_set_changed;
global int state;

;; store in a header_ref
global int height;
global slice chain_id;
global slice data_hash;
global slice validator_hash_set;

;; store in a validator_ref
;; first 256 bit is voting power
;; first ref is validators array
;; second ref is validators dict
global cell trusted_validator;
global cell untrusted_validator;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    int validator_set_changed = ds~load_uint(1);
    int state = ds~load_uint(8);
    slice header_cell = ds~load_ref().begin_parse();
    int height = header_cell~load_uint(32);
    cell chain_id_cell = header_cell~load_ref();
    chain_id = chain_id_cell.begin_parse();
    cell data_hash_cell = header_cell~load_ref();
    data_hash = data_hash_cell.begin_parse();
    cell validator_hash_set_cell = header_cell~load_ref();
    validator_hash_set = validator_hash_set_cell.begin_parse();
    slice validator_cell = ds~load_ref().begin_parse();
    trusted_validator = validator_cell~load_ref();
    untrusted_validator = validator_cell~load_ref();
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
    cell header_ref = begin_cell()
                        .store_uint(height, 32)
                        .store_ref(begin_cell().store_slice(chain_id).end_cell())
                        .store_ref(begin_cell().store_slice(data_hash).end_cell())
                        .store_ref(begin_cell().store_slice(validator_hash_set).end_cell())
                        .end_cell();
    
    cell validator_ref = begin_cell()
                            .store_ref(trusted_validator)
                            .store_ref(untrusted_validator)
                            .end_cell();
    set_data(
        begin_cell()
            .store_uint(validator_set_changed, 1)
            .store_uint(state, 8)
            .store_ref(header_ref)
            .store_ref(validator_ref)
        .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
        return ();
    }

    slice cs = in_msg_full.begin_parse();
   
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::verify_block_hash) {
        ;; store block data
        slice ds = in_msg_body~load_ref().begin_parse();
        slice header = ds~load_ref().begin_parse();
        
        (int temp_height, slice temp_chain_id, slice temp_data_hash, slice temp_validator_hash_set) = get_data_from_header(header);
        throw_if(error::invalid_height, height > temp_height);
        height = temp_height;
        throw_if(error::not_match_chain_id, chain_id.equal_slice?(temp_chain_id) != -1);
        chain_id = temp_chain_id;
        data_hash = temp_data_hash;
        validator_set_changed = 0;

        builder bodyBuilder = begin_cell();
        if (validator_hash_set.equal_slice?(temp_validator_hash_set) != -1) {
            validator_set_changed = 1;
            validator_hash_set = temp_validator_hash_set;

            ;; update untrusted validators here
            cell validators_cell = ds~load_ref();
            builder inner_cell = begin_cell().store_ref(validators_cell);
            slice validators = validators_cell.begin_parse();
            cell validators_by_address = new_dict();
            int total_voting_power = 0;
            while(validators.slice_refs_empty?() != -1){
                slice next_ref = validators~load_ref().begin_parse();
                slice validator_i =  validators~load_ref().begin_parse();
                int address = validator_i~load_uint(160);
                validators_by_address~udict_set(160, address, validator_i);
                int voting_power = validator_i~load_uint(32);
                total_voting_power += voting_power;
                validators = next_ref;
            }
            untrusted_validator = inner_cell.store_uint(total_voting_power, 256).store_ref(validators_by_address).end_cell();

            ;; send new message to verify untrusted validators
            cell commit = ds~load_ref();
            bodyBuilder = bodyBuilder 
                        .store_uint(op::verify_untrusted_validators, 32)
                        .store_uint(query_id, 64)
                        .store_ref(begin_cell().store_slice(sender_address).store_ref(commit).end_cell());
        } else {
            ds~load_ref();
            cell commit = ds~load_ref();
            bodyBuilder = bodyBuilder 
                        .store_uint(op::verify_sigs, 32)
                        .store_uint(query_id, 64)
                        .store_ref(begin_cell().store_slice(sender_address).store_ref(commit).end_cell());
        }
        cell body = bodyBuilder.end_cell();
        send_simple_message(0, my_address(), body, CARRY_REMAINING_GAS);

        state = state::initial;
        save_data();
        return ();
    }

    if (op == op::verify_untrusted_validators) {
        throw_if(error::invalid_sender, sender_address.equal_slice?(my_address()) != -1);
        int result = verify::verify_validators_set(validator_hash_set, untrusted_validator.begin_parse());
        throw_if(error::invalid_verify_validators_set, result != -1);

        ;; send verify_sigs message
        cell wrap_commit = in_msg_body~load_ref(); ;; a cell that have ref is commit
        builder bodyBuilder = begin_cell();
        bodyBuilder = bodyBuilder 
                        .store_uint(op::verify_sigs, 32)
                        .store_uint(query_id, 64)
                        .store_ref(wrap_commit);
        cell body = bodyBuilder.end_cell();
        send_simple_message(0, my_address(), body, CARRY_REMAINING_GAS);
        state = state::verify_untrusted_validators;
        save_data();
        return ();
    }

    if (op == op::verify_sigs) {
        throw_if(error::invalid_sender, sender_address.equal_slice?(my_address()) != -1);
        if (validator_set_changed != 0) {
            ;; if validator set changed => it have to finish verify_untrusted_validator state
            throw_if(error::invalid_state, state != state::verify_untrusted_validators);
        }

        slice body = in_msg_body~load_ref().begin_parse();
        slice response_address = body~load_msg_addr();
        slice commit = body~load_ref().begin_parse();
        int result = 0;

        result = verify::verify_optimized_commit_builder(
            validator_set_changed,
            height,
            chain_id,
            commit,
            trusted_validator.begin_parse(),
            untrusted_validator.begin_parse());
        throw_if(error::invalid_verify_sigs, result != -1);
        if (validator_set_changed != 0) {
            trusted_validator = untrusted_validator;
        }
        state = state::initial;
        send_empty_message(0, response_address, CARRY_REMAINING_GAS);
        save_data();
        return ();
    }

    if (op == op::verify_receipt) {
        slice body = in_msg_body~load_ref().begin_parse();
        int receipt_height = body~load_uint(64);
        slice tx_raw = body~load_ref().begin_parse();

        slice proofs = body~load_ref().begin_parse();
        slice positions =  body~load_ref().begin_parse();
        slice data =  body~load_ref().begin_parse();
        throw_if(error::invalid_height, receipt_height != height);
      
        (tuple encode_tx_raw, _) = tx_raw::encode(tx_raw);
        int tx_hash = begin_cell()
                    .store_uint(prefix::leaf, 8)
                    .store_uint(digest_hash(encode_tx_raw), 256)
                    .end_cell()
                    .begin_parse()
                    .string_hash();
        int calculate_data_hash = hash_from_tree_proof_ref(proofs, tx_hash, positions);
     
        (_, int value) = data_hash.load_uint(256);
        throw_if(error::invalid_verify_receipt, value != calculate_data_hash);
       
        cell body = begin_cell()
                        .store_uint(op::confirm_tx, 32)
                        .store_uint(query_id, 64)
                        .store_slice(data)
                    .end_cell();

                    
        send_simple_message(0, sender_address, body, CARRY_REMAINING_GAS);
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

int get_height() method_id {
    load_data();
    return height;
}

slice get_chain_id() method_id {
    load_data();
    return chain_id;
}

slice get_data_hash() method_id {
    load_data();
    return data_hash;
}

slice get_validator_hash_set() method_id {
    load_data();
    return validator_hash_set;
}
