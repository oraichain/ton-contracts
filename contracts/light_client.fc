#include "imports/stdlib.fc";
#include "utils/verify.fc";
#include "static/errors.fc";
#include "static/op_codes.fc";
#include "utils/messages.fc";
#include "utils/helper.fc";

;; storage variables

global int height;
global slice chain_id;
global slice next_validator_hash_set;
global slice validator_info;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    int height = ds~load_uint(32);

    cell chain_id_cell = ds~load_ref();
    chain_id = chain_id_cell.begin_parse();

    cell next_validator_hash_set_cell = ds~load_ref();
    next_validator_hash_set = next_validator_hash_set_cell.begin_parse();

    cell validator_set_cell = ds~load_ref();
    validator_info = validator_set_cell.begin_parse();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline_ref {
    set_data(
        begin_cell()
            .store_uint(height, 32)
            .store_ref(begin_cell().store_slice(chain_id).end_cell())
            .store_ref(begin_cell().store_slice(next_validator_hash_set).end_cell())
            .store_ref(begin_cell().store_slice(validator_info).end_cell())
        .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages        
        return ();
    }

    slice cs = in_msg_full.begin_parse();
   
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
   
    if (op == op::verify_block_hash) {
        slice block_proof = in_msg_body~load_ref().begin_parse();
        int block_hash = block_proof~load_uint(256);
        slice header = block_proof~load_ref().begin_parse();
        int result = verify::verify_block_hash(header, block_hash);
        throw_if(error::invalid_block_header, result != -1);
        (int temp_height, slice temp_chain_id, slice temp_next_validator_hash) = get_data_from_header(header);
        height = temp_height;
        chain_id = temp_chain_id;
        next_validator_hash_set = temp_next_validator_hash;
        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

int get_height() method_id {
    load_data();
    return height;
}

slice get_chain_id() method_id {
    load_data();
    return chain_id;
}

slice get_next_validator_hash_set() method_id {
    load_data();
    return next_validator_hash_set;
}